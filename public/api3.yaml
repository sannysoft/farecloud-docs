openapi: 3.0.0
info:
  title: Farecloud API
  description: |
    Farecloud API allows you to search for flights and availability and book tickets.

    **Please note: All the request/response elements having small right arrow at the end of the name are expandable on click.**

    # Concept

    Farecloud allows you to search flights and prices for the lowcost carriers worldwide.

    All our prices are total final prices that include all the fees and charges.

    ## Cache

    Most searches are performed on our database containing cached flight details & prices.

    We do our best to update prices as fast as possible and to keep as many flight variants as possible at every single moment of time but due to cache the following problems may occur from time to time:

    * Price rise/flight unavailable at Validation (pre-booking) stage
    * Lack of some flight variants available at the airline website - please contact us in this case

    # Implementation details

    Base URL for the requests is **https://api.farecloud.io/v1/**. You have to append method name to the base URL.

    All the responses from Farecloud API are in JSON format.

    **Your implementation should allow any undocumented JSON fields in response as we may introduce new fields at anytime. Order of JSON fields in response is not guaranteed - please use order-independent JSON parsing.**

    **It's required to pass `accept-encoding: gzip` in all HTTP requests. This will allow compressing HTTP responses for faster response time**

    ## General Flow

    There are 4 main methods available via Farecloud at the moment:

    - **Search** - Should be called to get all the flights and prices available for the specified route and dates. `Fast response (up to 10 seconds, normally 3-5 seconds.`
    - **Validation** - Used to accurately check for the price & luggage option for a particular flight variant. Should be
    called when the customer visits the booking page and accurate price check is required. `Request may take up to 40 seconds.`
    - **Book** - Used to pass passenger details and all the information required to issue tickets. Calling book
    method launches the issue of the tickets and may not be cancelled. There is no way to hold the price/seats without issuing
    tickets for lowcost carriers.  Issue process doesn't end when response is received. You need to call Details method or use webhooks to get issue status. `May take up to 60 seconds.`
    - **Details** - Used to get booking details (status, passengers, airline pnrs etc) after the booking was created (Book method called) `Fast response.`

    ## Countries, Airports, Carriers data

    We provide data using industry coding standards such as IATA and ICAO codes for carriers, airports and countries. There are some coding directory providers you can use in order to interpret these codes:

    | Name | Data | Quality | Price |
    |------|------|---------|-------|
    | [AirHex](https://airhex.com) | Full database + airline logos | High | $1080 |
    | [Aviation Edge](https://aviation-edge.com/database-download/) | Full database | High | $199 |
    | [Our Airports](http://ourairports.com/data/) | Airports + Countries | Medium | Free |
    | [Open Flights](https://github.com/jpatokal/openflights/tree/master/data) | Full database | Inaccurate | Free |

    ## Authentication

    Farecloud uses simple **Basic HTTP authentication** to for authenticating requests.

    You can authorize requests even in:
      * your browser - browser will ask for login and password when you open farecloud API URL
      * curl - `curl --user login:password https://api.farecloud.io/`
      * Any programming language and HTTP library supports Basic HTTP authentication

    <security-definitions />

    ## Error handling

    Despite the HTTP status code returned by the farecloud API we recommend you to look at the `status` and `message` field of the response.

    `message` will only appear in response in case of some problem. For example the search response may look like this:

    ```
    {
      "status": "error",
      "message": "date1 cannot be in the past"
    }
    ```

    It might be a good idea to always check if `message` field is present.

    ## Webhooks

    Farecloud can send POST requests to your URL when any of your bookings have status update.
    Please provide Farecloud with your webhook URL. POST requests contains JSON with 2 fields: type and data.

    Type can be one of:
    - issue_started
    - issued
    - failed
    - bp_avaialble (Boarding passes available for your flight - most of bookings wouldn't send boarding passes)

    You should return any response for the webhook call with the OK HTTP status code (200).
    In case of webhook failure (Non-200 code or any other problem) webhook call will be repeated every minute for no longer than 2 hours.


    Example:
    ```
    {
        "type": "issued",
        "data": {
            "number": "29D2DF",
            "createdAt": "2019-09-17 09:58",
            "luggageAdded": "20",
            "locators": ["DAZYCX"],
            "pnrs": [{
                "id": 13857,
                "status": "issued",
                "airlinePnrs": ["DAZYCX"],
                "fareRules": null,
                "flights": [{
                    "marketingCarrier": "PC",
                    "marketingCarrierFull": "PC",
                    "operatingCarrier": "PC",
                    "departureDateTime": "2019-09-19 14:30",
                    "arrivalDateTime": "2019-09-19 17:35",
                    "cabin": "Y",
                    "plane": "",
                    "arrivalTerminal": "",
                    "departureTerminal": "",
                    "number": "389",
                    "from": "DME",
                    "to": "SAW",
                    "bookingClass": "",
                    "segmentIndex": 0,
                    "includedLuggage": "",
                    "handLuggage": {
                        "dimensions": "55x40x20",
                        "weight": 10
                    },
                    "charter": false
                }],
                "purchasedLuggage": {
                    "code": "20",
                    "price": {
                        "amount": 26,
                        "currency": "EUR"
                    }
                },
                "ticketNumbers": [],
                "bpUrls": [],
                "creditCard": null
            }],
            "flights": [{
                "marketingCarrier": "PC",
                "marketingCarrierFull": "PC",
                "operatingCarrier": "PC",
                "departureDateTime": "2019-09-19 14:30",
                "arrivalDateTime": "2019-09-19 17:35",
                "cabin": "Y",
                "plane": "",
                "arrivalTerminal": "",
                "departureTerminal": "",
                "number": "389",
                "from": "DME",
                "to": "SAW",
                "bookingClass": "",
                "segmentIndex": 0,
                "includedLuggage": "",
                "handLuggage": {
                    "dimensions": "55x40x20",
                    "weight": 10
                },
                "charter": false,
                "planeName": null,
                "marketingCarrierName": "Pegasus Airlines",
                "operatingCarrierName": "Pegasus Airlines",
                "fromFull": {
                    "iata": "DME",
                    "airportName": "Moscow Domodedovo Airport",
                    "cityName": "Moscow",
                    "countryIso": "RU",
                    "countryName": "Russia",
                    "terminal": null
                },
                "toFull": {
                    "iata": "SAW",
                    "cityName": "Istanbul",
                    "airportName": "Sabiha Gokcen International Airport",
                    "countryIso": "TR",
                    "countryName": "Turkey",
                    "terminal": null
                },
                "pnrIndex": 0
            }],
            "passengers": [{
                "type": "A",
                "firstName": "ALEX",
                "lastName": "KOTIGOV",
                "sex": "M",
                "dateOfBirth": "1978-06-05",
                "nationality": "RU",
                "passportNumber": "720160495",
                "passportExpirationDate": "2021-10-20"
            }],
            "transactions": [{
                "partner": "jetcompass",
                "date": "2019-09-17 09:58",
                "amount": -163,
                "currency": "EUR",
                "comment": "Issue of 29D2DF",
                "type": "booking"
            }],
            "bpUrls": [],
            "price": 163,
            "email": "some-test-email@emails.com",
            "phone": "+79851234567",
            "partnerId": "972X2NA",
            "status": "issued"
        }
    }
    ```

    ## Testing

    Use "test=true" parameter for Issue method in order to test virtual ticket issuing. There are no dedicated test environment and all data is live and actual. Please note that no information is sent to the airline until the tickets issue is initiated.

  contact:
    name: Farecloud Team
    url: https://farecloud.io
    email: support@farecloud.io
  version: '1.0'
  x-logo:
    url: "/logo.png"
    backgroundColor: "#FAFAFA"
    altText: "Farecloud logo"
servers:
- url: https://api.farecloud.io/v1
  variables: {}
paths:
  /search:
    get:
      tags:
      - API Methods
      summary: Search for flights
      description: The result will contain number of bookable variants each consisting of price, signature and array of flights.
      operationId: SearchForFlights
      parameters:
      - name: from
        in: query
        description: Origin IATA-code
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: BKK
      - name: to
        in: query
        description: Destination IATA-code
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: HKT
      - name: date1
        in: query
        description: |
          Date of departure.

          Format is `yyyy-mm-dd`
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date
          example: "2019-01-25"
      - name: date2
        in: query
        description: |
          Date of return flight (for round trip flights).

          Format is `yyyy-mm-dd`
        style: form
        explode: true
        schema:
          type: string
          example: "2019-02-02"
          format: date
      - name: adults
        in: query
        description: Number of adults flying
        required: true
        style: form
        explode: true
        schema:
          type: number
          example: 1
          minimum: 1
          maximum: 9
      - name: children
        in: query
        description: Number of children flying
        style: form
        explode: true
        schema:
          type: number
          example: 0
          default: 0
      - name: infants
        in: query
        description: Number of infants flying. Should be less or equal to number of adults
        style: form
        explode: true
        schema:
          type: number
          example: 0
          default: 0
      - name: limit
        in: query
        description: Limit number of results
        style: form
        explode: true
        schema:
          type: number
          example: 200
          default: 300
      responses:
        200:
          description: Search response containing bookable flight options (variants).
          x-summary: One way search
          content:
            application/json:
              schema:
                description: Search response containing bookable flight options (variants).
                $ref: '#/components/schemas/SearchResponse'
              examples:
                oneWay:
                  summary: "One way"
                  value:
                    status: ok
                    variants:
                    - price:
                        amount: 37.3
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3033_25JAN2019_1955_25JAN2019_2120
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 19:55
                        arrivalDateTime: 2019-01-25 21:20
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3033'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                    - price:
                        amount: 47.89
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3017_25JAN2019_1520_25JAN2019_1650
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 15:20
                        arrivalDateTime: 2019-01-25 16:50
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3017'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                    - price:
                        amount: 47.89
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3031_25JAN2019_1535_25JAN2019_1730
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 15:35
                        arrivalDateTime: 2019-01-25 17:30
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3031'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                    - price:
                        amount: 47.89
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3015_25JAN2019_2115_25JAN2019_2240
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 21:15
                        arrivalDateTime: 2019-01-25 22:40
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3015'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7

                roundTrip:
                  summary: "Round trip"
                  value:
                    status: ok
                    variants:
                    - price:
                        amount: 74
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3033_25JAN2019_1955_25JAN2019_2120.0_HKT_DMK_FD_3036_02FEB2019_0600_02FEB2019_0720
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 19:55
                        arrivalDateTime: 2019-01-25 21:20
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3033'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-02-02 06:00
                        arrivalDateTime: 2019-02-02 07:20
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3036'
                        from: HKT
                        to: DMK
                        bookingClass: ''
                        segmentIndex: 1
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                    - price:
                        amount: 74
                        currency: EUR
                      signature: 0_DMK_HKT_FD_3033_25JAN2019_1955_25JAN2019_2120.0_HKT_DMK_FD_3042_02FEB2019_0640_02FEB2019_0750
                      flights:
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-01-25 19:55
                        arrivalDateTime: 2019-01-25 21:20
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3033'
                        from: DMK
                        to: HKT
                        bookingClass: ''
                        segmentIndex: 0
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
                      - marketingCarrier: FD
                        operatingCarrier: FD
                        departureDateTime: 2019-02-02 06:40
                        arrivalDateTime: 2019-02-02 07:50
                        cabin: Y
                        plane: ''
                        arrivalTerminal: ''
                        departureTerminal: ''
                        number: '3042'
                        from: HKT
                        to: DMK
                        bookingClass: ''
                        segmentIndex: 1
                        includedLuggage: ''
                        handLuggage:
                          dimensions: 56x36x23
                          weight: 7
      security:
      - httpBasic: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /validate:
    get:
      tags:
      - API Methods
      summary: Validate price & availability
      description: Use this method in order to accurately check flight price & availability as well as to get some details of the flights like possible extra luggage options and fare rules.
      operationId: ValidatePrice&Availability
      parameters:
      - name: signature
        in: query
        description: Signature of the variant you are checking price for
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: 0_DMK_HKT_FD_3033_25JAN2019_1955_25JAN2019_2120
      - name: adults
        in: query
        description: Number of adults
        required: true
        style: form
        explode: true
        schema:
          type: number
          example: 1
          minimum: 1
          maximum: 9
      - name: children
        in: query
        description: Number of children
        style: form
        explode: true
        schema:
          type: number
          example: 0
          default: 0
      - name: infants
        in: query
        description: Number of infants
        style: form
        explode: true
        schema:
          type: number
          example: 0
          default: 0
      responses:
        200:
          description: Validation response contains result of price and availability check
          content:
            application/json:
              schema:
                description: Validation response contains result of price and availability check
                $ref: '#/components/schemas/ValidateResponse'
      security:
      - httpBasic: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /book:
    post:
      tags:
      - API Methods
      summary: Booking
      description: |
        Create booking and launch issue process.

        This method will charge money from your Farecloud balance and start the tickets issue process.

        Method will return booking status (in most cases `waiting`) and empty airlinesPnr.  If the response `status` field is not `error` - the booking created succesfully and should be issued soon.

        **In case of any result (even error or timeout) please use Details request to get actual booking status.**

        You should call **Get booking details method** periodically to update booking status or configure webhooks on your side.
      operationId: CreateBooking
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
        required: true
      responses:
        200:
          description: Booking response containing status of the booking and farecloud id if succesfull
          content:
            application/json:
              schema:
                description: Booking response containing status of the booking and farecloud id if succesfull
                example:
                  status: booked
                  bookingId: A7B312X
                $ref: '#/components/schemas/BookingResponse'
              example:
                status: waiting
                bookingId: A7B312X
      security:
      - httpBasic: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
  /details:
    get:
      tags:
      - API Methods
      summary: Get booking details
      description: Use this method to get actual booking status, airline PNRs and all the booking details.
      operationId: GetDetails
      parameters:
      - name: id
        in: query
        description: Id of the booking (returned from Book method)
        required: true
        style: form
        explode: true
        schema:
          type: string
          example: DE0442
      responses:
        200:
          description: Get booking details response contains all of the booking details
          content:
            application/json:
              schema:
                description: Get booking details response contains all of the booking details
                $ref: '#/components/schemas/DetailsResponse'
      security:
      - httpBasic: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
components:
  schemas:
    SearchResponse:
      title: Search response
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
          description: ''
      description: Search response containing bookable flight options (variants)
    Status:
      title: status
      enum:
      - ok
      - error
      type: string
      example: ok
      x-enum-elements:
      - name: ok
        description: Succesfull search request
      - name: error
        description: Result should also contain text "message" field with error details
    Variant:
      title: Variant
      required:
      - price
      - signature
      - flights
      type: object
      properties:
        price:
          required:
          - currency
          - amount
          type: object
          properties:
            currency:
              type: string
              description: Currency 3-char code according to ISO
              example: EUR
            amount:
              type: number
              description: Amount represents value of the monetary object. It is floating point number
              example: 94.12
          description: Total price of the variant for all passengers
        signature:
          type: string
          description: Signature identifies combination of flights and is used for further steps like validation and booking
        flights:
          type: array
          items:
            $ref: '#/components/schemas/Flight'
          description: ''
    Money:
      title: Money
      required:
      - currency
      - amount
      type: object
      properties:
        currency:
          type: string
          description: Currency 3-char code according to ISO
          example: EUR
        amount:
          type: number
          description: Amount represents value of the monetary object. It is floating point number
          example: 94.12
    Flight:
      title: Flight
      required:
      - marketingCarrier
      - operatingCarrier
      - departureDateTime
      - arrivalDateTime
      - cabin
      - plane
      - departureTerminal
      - arrivalTerminal
      - number
      - from
      - to
      - bookingClass
      - segmentIndex
      - includedLuggage
      - handLuggage
      - charter
      type: object
      properties:
        marketingCarrier:
          type: string
          description: IATA-code of the airline that sells the ticket unders it's name
          example: FD
        operatingCarrier:
          type: string
          description: IATA-code of the airline that owns the plane and operates the flight
          example: FD
        departureDateTime:
          type: string
          description: |
            Represents local (not UTC) time of departure.

            Format: `YYYY-MM-DD hh:mm`
          example: 2019-02-10 10:30
        arrivalDateTime:
          type: string
          description: |
            Represents local (not UTC) time of arrival.

            Format: `YYYY-MM-DD hh:mm`
          example: 2019-02-10 12:30
        cabin:
          $ref: '#/components/schemas/Cabin'
        plane:
          type: string
          description: Aircrafrt iata-code. Blank if unknown
          example: 320
        departureTerminal:
          type: string
          description: |
            Digit or char representing origin airport terminal.

            Blank if airport has single terminal or if not specified
          example: T
        arrivalTerminal:
          type: string
          description: |
            Digit or char representing destination airport terminal.

            Blank if airport has single terminal or if not specified
          example: 1
        number:
          type: string
          description: |
            Digital part of flight number.

            Full flight number consists of marketing carrier + flight number
          example: 3202
        from:
          type: string
          description: IATA-code of origin airport
          example: BKK
        to:
          type: string
          description: IATA-code of destination airport
          example: HKT
        bookingClass:
          type: string
          description: |
            Booking class or tariff name.

            Blank if unknown/not specified
        segmentIndex:
          example: 0
          $ref: '#/components/schemas/SegmentIndex'
        includedLuggage:
          $ref: '#/components/schemas/Luggage'
        handLuggage:
          description: Represents hand luggage free allowance
          $ref: '#/components/schemas/HandLuggage'
        charter:
          example: false
          type: boolean
          description: true if it's a charter flight
    Cabin:
      title: cabin
      enum:
      - Y
      - C
      type: string
      example: Y
      x-enum-elements:
      - name: Y
        description: Economy class
      - name: C
        description: Business class
    SegmentIndex:
      title: segmentIndex
      enum:
      - 0
      - 1
      type: integer
      example: 0
      x-enum-elements:
      - name: Enum_0
        description: flights from origin to destination
      - name: Enum_1
        description: return flights
    HandLuggage:
      title: Hand luggage
      required:
      - dimensions
      - weight
      type: object
      properties:
        dimensions:
          type: string
          description: |
            **Important: This information is taken from Farecloud database and may not be 100% correct all the time.**

            **We recommend to use other sources of the information to determine included hand luggage accurately.**

            Maximum dimensions of the luggage piece in cm

            Format: `(width)x(height)x(depth)`
          example: 55x40x20
        weight:
          type: number
          description: Maximum weight in kilograms
          example: 10
      description: Represents hand luggage free allowance
    ValidateResponse:
      title: Validate response
      required:
      - status
      - signature
      - price
      - flights
      - passportRequired
      - luggageOptions
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ValidationStatus'
        signature:
          type: string
          description: Used to proceed with booking
        price:
          description: Total price for all passengers
          required:
          - currency
          - amount
          type: object
          properties:
            currency:
              type: string
              description: Currency 3-char code according to ISO
              example: EUR
            amount:
              type: number
              description: Amount represents value of the monetary object. It is floating point number
              example: 94.12
        flights:
          type: array
          items:
            $ref: '#/components/schemas/Flight'
          description: Flights
        passportRequired:
          type: boolean
          description: Shows if passport details (number and expiration date) is required to book tickets
        passengers:
          $ref: '#/components/schemas/PassengersCount'
#        fareRules:
#          type: string
#          description: Variant fare rules
#          example: Non-refundable and non-changeable
        luggageOptions:
          type: array
          items:
            $ref: '#/components/schemas/LuggageOption'
          description: Purchasable extra luggage options for this variant.
      description: Validation response contains result of price and availability check
    ValidationStatus:
      title: Validation status
      enum:
      - available
      - unavailable
      - error
      type: string
      example: available
      x-enum-elements:
      - name: available
        description: Validation was successfull
      - name: unavailable
        description: Can't be booked at the moment (no seats etc)
      - name: error
        description: All other situations
    PassengersCount:
      title: Passengers count
      required:
      - adults
      - children
      - infants
      type: object
      properties:
        adults:
          type: number
          description: Number of adults.
          example: 1
        children:
          type: number
          description: Number of children.
          example: 0
        infants:
          type: number
          description: Number of infants.
          example: 0
    LuggageOption:
      title: Luggage option
      required:
      - code
      - price
      - totalPrice
      type: object
      properties:
        code:
          $ref: '#/components/schemas/Luggage'
        price:
          description: Price of the selected luggage for all passengers
          required:
          - currency
          - amount
          type: object
          properties:
            currency:
              type: string
              description: Currency 3-char code according to ISO
              example: EUR
            amount:
              type: number
              description: Amount represents value of the monetary object. It is floating point number
              example: 10
        totalPrice:
          description: Price of the selected luggage + tickets for all passengers (to be used for expectedPrice field at **Booking method**)
          required:
          - currency
          - amount
          type: object
          properties:
            currency:
              type: string
              description: Currency 3-char code according to ISO
              example: EUR
            amount:
              type: number
              description: Amount represents value of the monetary object. It is floating point number
              example: 104.12
      description: Represents purchasable extra luggage
    BookingRequest:
      title: Booking request
      required:
      - email
      - phone
      - requestOrigin
      - signature
      - passengers
      - luggageCode
      - expectedPrice
      type: object
      properties:
        email:
          type: string
          description: This email address will be used to send time change/cancellation emails from the airline
          example: test@example.com
          format: email
        phone:
          type: string
          description: |
            Customer phone number

            Required format: `+(country phone code) (area code) (full number)`
          example: +12345678912
        requestOrigin:
          type: string
          description: Should contain the website domain / company name and locale used to book tickets
          example: bestflights_com-en
        signature:
          type: string
          description: Signature representing the flights (received from the validation step)
          example: nl5dqUgM5fMHOPKrAywuPaSJKOMIXq7t7AEFiRqzm3i6v9gKUD_LuZlBEqsTPKgBc-c4RE6sE55eDUbWQhUA7fsf6V4l-hTDA43DvtiDhCJkJCYL6QXQDc1TxgjGfBE4GDfatMG_hNLENy__SHl6xuxEArdtOjaupqNYeH3ZUsziD0JhU7CHbEcSUnUoEY5dKbSYaE_hemSGO-bIz_vuzyUYqRTHCBr8zTuH8htXyC5yTOvgZ20_9xxgSFnAXwFGmAOVa1wnq6oz2FDDOaJ_v2FAiCrEYDusuDB4xmnmWPgUa1_21y6Ch4gqpAlQnHI2OqYdEum-FqqIWOFdgaQlU97GBxAXFTxDRta_wnD-D7Y1
        passengers:
          type: array
          items:
            $ref: '#/components/schemas/PassengerDetails'
          description: |
            List of passengers details.

            Passengers count should be the same as in the validation request.
        luggageCode:
          type: string
          description: Should be empty string if no extra luggage is selected
          example: 20
        localId:
          type: string
          description: |
            Your local booking id.

            Used to find bookings at Farecloud hub easier and to match your bookings with Farecloud
          example: 12853
        expectedPrice:
          type: number
          description: |
            Amount of money in base currency you expect to pay for the tickets for this booking.

            This is a parameter that allows you to set a threshold for currency and airfare fluctuations that might slightly change during the booking process. We recommend to add 0.5% to the total amount of booking as a safety threshold, however it's up to you and varies depending on time you need to complete the booking.

            It should consist of ticket price + extra luggage price (if any).

            **If expectedPrice param is less than real price the booking process will fail and error is returned**
          example: 120.53
        test:
          description: |
            **Use only for development/testing purposes**

            Set to `true` for free virtual tickets issue.

            Farecloud will set status to `issued` after some time and will generate a fake airline PNRs.
          required: false
          type: boolean
          default: false
    PassengerDetails:
      title: Passenger details
      required:
      - firstName
      - lastName
      - gender
      - dateOfBirth
      - nationality
      type: object
      properties:
        firstName:
          type: string
          description: May contain multiple words or complex names like "MARIA-ELENA"
          example: Bill
        lastName:
          type: string
          description: May conain compex last names
          example: Gates
        gender:
          example: M
          $ref: '#/components/schemas/Gender'
        dateOfBirth:
          type: string
          description: |
            Format: `YYYY-MM-DD`
          example: 1980-02-25
        nationality:
          type: string
          description: Country code according to ISO 3166-1 alpha-2
          example: US
        passportNumber:
          type: string
          description: |
            Passport/id card/other permitted document number that customer should carry when flying.

            **This field is required if passportRequired is true at the validation stage**
          example: 71843985
        passportExpirationDate:
          type: string
          description: |
            Passport/id card/other permitted document expiration date that customer should carry when flying. If the document doesn't have expiration date it can in rare cases be ommited.

            **The date should be after the last flight date.**

            **This field is required if passportRequired is true at the validation stage**

            Format: `YYYY-MM-DD`
          example: 2024-05-25
      description: This object contains details of a particular passenger
    Luggage:
      title: luggage
      type: string
      example: 20
      description: |
        Luggage allowance in kg splitted by bags.

        Format: `(max bag weight in kg)+(max bag weight in kg)`

        **Examples:**

        * "" or "0" for no luggage
        * "20" for 20kg single bag
        * "25+25" for 2 bags not more than 25 kg each
    Gender:
      title: gender
      enum:
      - M
      - F
      type: string
      example: M
      x-enum-elements:
      - name: M
        description: Male
      - name: F
        description: Female
    BookingResponse:
      title: Booking response
      required:
      - status
      type: object
      properties:
        status:
          title: Booking status
          $ref: '#/components/schemas/BookingStatus'
          example: booked
        bookingId:
          type: string
          description: Unique farecloud booking id - save it for future use
          example: A7B312X
      description: Booking response containing status of the booking and farecloud id if succesfull
      example:
        status: booked
        bookingId: A7B312X
    BookingStatus:
      title: Booking status
      description: |
        **Status description:**
        * **new** - Booking created
        * **error** - Unable to create booking
        * **waiting** - We are issuing the tickets
        * **issued** - Tickets are issued
        * **failed** - Tickets issue failed
        * **cancelled** - Booking was created but cancelled due to no activity
      enum:
      - new
      - waiting
      - issued
      - failed
      - cancelled
      - error
      type: string
      example: waiting
      x-enum-elements:
      - name: booked
        description: Succesfully booked
      - name: error
        description: Result should also contain text "message" field with error details
    DetailsResponse:
      title: Validate response
      required:
      - number
      - bookingStatus
      - airlinePnrs
      - price
      - fareRules
      - flights
      - passengers
      - purchasedLuggage
      - test
      - transactions
      type: object
      properties:
        number:
          type: string
          description: Booking id
          example: DE0442
        bookingStatus:
          $ref: '#/components/schemas/BookingStatus'
        airlinePnrs:
          type: array
          description: List of airline booking numbers (PNRs) - 1 PNR for one way, 1 or 2 for round trip
          items:
            type: string
            example: DE0442
        price:
          description: Total price for all passengers
          required:
          - currency
          - amount
          type: object
          properties:
            currency:
              type: string
              description: Currency 3-char code according to ISO
              example: EUR
            amount:
              type: number
              description: Amount represents value of the monetary object. It is floating point number
              example: 94.12
        fareRules:
          type: string
          description: Fare rules
          example: Non-refundable and non-changeable
        flights:
          type: array
          items:
            $ref: '#/components/schemas/Flight'
          description: Flights
        passengers:
          type: array
          items:
            allOf:
            - type: object
              required:
              - type
              properties:
                type:
                  description: |
                    **Passenger type:**
                    * **A** - Adult
                    * **C** - Child
                    * **I** - Infant
                  enum:
                  - A
                  - C
                  - I
                  type: string
                  example: A
            - $ref: '#/components/schemas/PassengerDetails'
          description: |
            List of passengers details.
        purchasedLuggage:
          type: object
          title: Luggage
          description: Purchased luggage
          required:
          - code
          - price
          - totalPrice
          properties:
            code:
              $ref: '#/components/schemas/Luggage'
            price:
              description: Price of the selected luggage for all passengers
              required:
              - currency
              - amount
              type: object
              properties:
                currency:
                  type: string
                  description: Currency 3-char code according to ISO
                  example: EUR
                amount:
                  type: number
                  description: Amount represents value of the monetary object. It is floating point number
                  example: 10
        test:
          type: boolean
          description: Is test booking (in case test=true) or real (test=false)
          example: false
        transactions:
          type: array
          description: Charges to your deposit linked to this booking
          items:
            $ref: '#/components/schemas/Transaction'
    Transaction:
      title: Charge/refund/deposit to your deposit
      required:
      - date
      - amount
      - currency
      - comment
      - type
      - test
      type: object
      properties:
        date:
          type: string
          description: |
            Date and time of transaction (UTC)

            Format: `YYYY-MM-DD hh:mm`
          example: 2018-11-07 05:46
        amount:
          type: float
          description: |
            Amount of the transaction

            Negative for charges. Positive for refunds and deposits.
          example: -21
        currency:
          type: string
          description: Currency of the charge (at the moment EUR always)
          example: EUR
        comment:
          type: string
          description: Description of the charge in custom format
          example: Issue of DE0442
        type:
          $ref: '#/components/schemas/TransactionType'
        test:
          type: boolean
          description: Is test charge (in case test=true) or real (test=false)
          example: false
    TransactionType:
      description: |
        **Transaction type:**
        * **booking** - Tickets issue transaction
        * **additional** - Additional charge (luggage, tickets change etc)
        * **refund** - Refund of funds for tickets
        * **topup** - Deposit (not linked to bookings)
      enum:
      - booking
      - additional
      - refund
      - topup
      type: string
      example: booking
  securitySchemes:
    httpBasic:
      type: http
      scheme: basic
security:
- httpBasic: []
tags:
- name: API Methods
  description: ''
  
